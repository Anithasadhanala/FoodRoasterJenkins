// <auto-generated />
using System;
using FoodRoasterServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodRoasterServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250731102935_ColumnvalueExtendedTheLimit")]
    partial class ColumnvalueExtendedTheLimit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodMenuItems", b =>
                {
                    b.Property<int>("FoodItemsId")
                        .HasColumnType("int");

                    b.Property<int>("FoodMenusId")
                        .HasColumnType("int");

                    b.HasKey("FoodItemsId", "FoodMenusId");

                    b.HasIndex("FoodMenusId");

                    b.ToTable("FoodMenuItems");
                });

            modelBuilder.Entity("FoodRoasterServer.Models.FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<bool>("IsVeg")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FoodItems", t =>
                        {
                            t.HasCheckConstraint("CK_FoodItems_Category_Enum", "Category IN (0, 1, 2, 3, 4, 5)");
                        });
                });

            modelBuilder.Entity("FoodRoasterServer.Models.FoodMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MenuDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FoodMenus");
                });

            modelBuilder.Entity("FoodRoasterServer.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HolidayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("FoodRoasterServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordDigest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodRoasterServer.Models.UserBlacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlacklists");
                });

            modelBuilder.Entity("UserMealRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodMenuId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVegChoice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodMenuId");

                    b.HasIndex("UserId", "FoodMenuId")
                        .IsUnique()
                        .HasDatabaseName("UX_UserMealRegistration_UserId_FoodMenuId");

                    b.ToTable("UserMealRegistrations");
                });

            modelBuilder.Entity("FoodMenuItems", b =>
                {
                    b.HasOne("FoodRoasterServer.Models.FoodItem", null)
                        .WithMany()
                        .HasForeignKey("FoodItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodRoasterServer.Models.FoodMenu", null)
                        .WithMany()
                        .HasForeignKey("FoodMenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodRoasterServer.Models.UserBlacklist", b =>
                {
                    b.HasOne("FoodRoasterServer.Models.User", "User")
                        .WithMany("UserBlacklists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserMealRegistration", b =>
                {
                    b.HasOne("FoodRoasterServer.Models.FoodMenu", "FoodMenu")
                        .WithMany("UserMealRegistrations")
                        .HasForeignKey("FoodMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodRoasterServer.Models.User", "User")
                        .WithMany("UserMealRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodMenu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodRoasterServer.Models.FoodMenu", b =>
                {
                    b.Navigation("UserMealRegistrations");
                });

            modelBuilder.Entity("FoodRoasterServer.Models.User", b =>
                {
                    b.Navigation("UserBlacklists");

                    b.Navigation("UserMealRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
